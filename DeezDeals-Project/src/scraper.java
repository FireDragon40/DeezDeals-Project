import java.util.ArrayList;
import java.util.regex.Pattern;


import twitter4j.*; 

/**
 * This class creates a search query and uses that to 
 * to create a hash and a string based on the query search paramaters and regex to filter
 * through each tweet.
 * @author Deez Deals
 */ 
public class scraper {
    /**
     * The fieldSet with all the paramaters passed into it. 
     */
    private fSets fields;

    /**
     * The search query (twitter4j package) that allows us to filter by various manners.
     */
    private Query search;

    /**
     * The amount of tweets that will be scraped. Max of 100!
     */
    private int tweetCounter;

    /**
     * Contains our regular expression generated by one of the private methods.
     */
    Pattern regex;

    /**
     * Contains the array list of the tweets that will be scraped.
     */
    private ArrayList <String> tweetstoStting;
    /**
     * The Twitter class type that authenticates the twitter API credentials.
     */
    private Twitter authentiocation; 

    /**
     * The defuault value of the tweet counter if there is an invlaid one input.
     */
    private final int std_count = 10;

    /**
     * Construcor that takes in a fieldSet, a query search from the twitter4j package, and a 
     * count of tweets wanted to be iterated through.
     * @param f The fieldSet with the paramaters of the search.
     * @param srch A twitter4j Query that will be used to filter tweets by keyword. 
     * @param count The amount of tweets (max of 100) that will be pulled from the Twitter API.
     */
    public scraper(fSets f, Query srch, int count, Twitter auth)
    {
        this.fields = f;
        this.search = srch;
        // Set the keyword in the Query if it is available in the fieldset
        this.setKeyWord();
        this.tweetCounter = this.setTweetCounter(count);
        this.authentiocation = auth;
        //this.regex = generateRegex();


    }
    /**
     * Sets the keyword passed in.
     */
    private void setKeyWord()
    {
        if (this.fields.getKeyWordOn())
        {
            this.search.setQuery(this.fields.getkeyWord());
        }
    }

    private int setTweetCounter(int tcount)
    {
        int result = std_count;
        if (tcount > 0 && tcount <= 100)
        {
            result = tcount;
        }
        return result;
    }

    /*private void generateRegex()
    {
        // All possible variables that will go into dynamically creating our regex.
        var food = "";
        var clothes = "";
        var other = "";

        //Pattern regex = Pattern.compile(".*(\$\d*\.*\d*).*\.*(deal*|sale*|deals*|sales*).*\."); 

        if (this.fields.getFood())
        {
            //regex to sort by food paramater
            food = "";

        }
        if (this.fields.getKeyWordOn())
        {
            // regex to sort based on keyword although this is already done directly through twitter4j.
            // This is for grouping to display gracefully on page.
            

        }
        if (this.fields.getClothes())
        {
            // Regex to sort through clothes deals 
        }

        if (this.fields.getOther())
        {
            // Regex to sort by other random deals
        }
        // Standard paramaters that are always grouped are price of "deal", and sentence that 
        // incorporates the word deal(s) or sale(s)  
        //var reg = new RegExp(food + '.*(\$\d*\.*\d*).*\.*(deal*|sale*|deals*|sales*).*\.' + clothes, 'g') 
        
        
        this.regex = result;
    } */

    
    
    /**
     * Gets the fieldSet object currently in the class.
     * @return The fieldSet class currently in the scraper class.
     */
    public fSets getFieldSet()
    {
        return this.fields;
    }

    /**
     * Gets the Query twitter4j object currently in the class.
     * @return The Query twitter4j object.
     */
    public Query getQuery()
    {
        return this.search;
    }

    /**
     * Gets the amount of tweets to be pulled from the Twitter API
     * @return The number of Tweets to be pulled from the Twitter API.
     */
    public int tweetCounter()
    {
        return this.tweetCounter;
    }


}
